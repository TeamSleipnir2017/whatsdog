
watchdog2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000081c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000558  20070000  0008081c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000090  20070558  00080d74  00020558  2**2
                  ALLOC
  3 .stack        00002000  200705e8  00080e04  00020558  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020558  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020581  2**0
                  CONTENTS, READONLY
  6 .debug_info   00005340  00000000  00000000  000205da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff9  00000000  00000000  0002591a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002219  00000000  00000000  00026913  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004c0  00000000  00000000  00028b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000430  00000000  00000000  00028fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00003e06  00000000  00000000  0002941c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007282  00000000  00000000  0002d222  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00061928  00000000  00000000  000344a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000ad4  00000000  00000000  00095dcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200725e8 	.word	0x200725e8
   80004:	000803ed 	.word	0x000803ed
   80008:	000803e9 	.word	0x000803e9
   8000c:	000803e9 	.word	0x000803e9
   80010:	000803e9 	.word	0x000803e9
   80014:	000803e9 	.word	0x000803e9
   80018:	000803e9 	.word	0x000803e9
	...
   8002c:	000803e9 	.word	0x000803e9
   80030:	000803e9 	.word	0x000803e9
   80034:	00000000 	.word	0x00000000
   80038:	000803e9 	.word	0x000803e9
   8003c:	000803e9 	.word	0x000803e9
   80040:	000803e9 	.word	0x000803e9
   80044:	000803e9 	.word	0x000803e9
   80048:	000803e9 	.word	0x000803e9
   8004c:	000803e9 	.word	0x000803e9
   80050:	000805b5 	.word	0x000805b5
   80054:	000803e9 	.word	0x000803e9
   80058:	000803e9 	.word	0x000803e9
   8005c:	000803e9 	.word	0x000803e9
   80060:	000803e9 	.word	0x000803e9
   80064:	000803e9 	.word	0x000803e9
   80068:	00000000 	.word	0x00000000
   8006c:	00080235 	.word	0x00080235
   80070:	00080249 	.word	0x00080249
   80074:	0008025d 	.word	0x0008025d
   80078:	00080271 	.word	0x00080271
	...
   80084:	000803e9 	.word	0x000803e9
   80088:	000803e9 	.word	0x000803e9
   8008c:	000803e9 	.word	0x000803e9
   80090:	000803e9 	.word	0x000803e9
   80094:	000803e9 	.word	0x000803e9
   80098:	000803e9 	.word	0x000803e9
   8009c:	000803e9 	.word	0x000803e9
   800a0:	000803e9 	.word	0x000803e9
   800a4:	00000000 	.word	0x00000000
   800a8:	000803e9 	.word	0x000803e9
   800ac:	000803e9 	.word	0x000803e9
   800b0:	000803e9 	.word	0x000803e9
   800b4:	000803e9 	.word	0x000803e9
   800b8:	000803e9 	.word	0x000803e9
   800bc:	000803e9 	.word	0x000803e9
   800c0:	000803e9 	.word	0x000803e9
   800c4:	000803e9 	.word	0x000803e9
   800c8:	000803e9 	.word	0x000803e9
   800cc:	000803e9 	.word	0x000803e9
   800d0:	000803e9 	.word	0x000803e9
   800d4:	000803e9 	.word	0x000803e9
   800d8:	000803e9 	.word	0x000803e9
   800dc:	000803e9 	.word	0x000803e9
   800e0:	000803e9 	.word	0x000803e9
   800e4:	000803e9 	.word	0x000803e9
   800e8:	000803e9 	.word	0x000803e9
   800ec:	000803e9 	.word	0x000803e9
   800f0:	000803e9 	.word	0x000803e9

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070558 	.word	0x20070558
   80110:	00000000 	.word	0x00000000
   80114:	0008081c 	.word	0x0008081c

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	2007055c 	.word	0x2007055c
   80144:	0008081c 	.word	0x0008081c
   80148:	0008081c 	.word	0x0008081c
   8014c:	00000000 	.word	0x00000000

00080150 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80150:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80152:	480e      	ldr	r0, [pc, #56]	; (8018c <sysclk_init+0x3c>)
   80154:	4b0e      	ldr	r3, [pc, #56]	; (80190 <sysclk_init+0x40>)
   80156:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80158:	213e      	movs	r1, #62	; 0x3e
   8015a:	2000      	movs	r0, #0
   8015c:	4b0d      	ldr	r3, [pc, #52]	; (80194 <sysclk_init+0x44>)
   8015e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80160:	4c0d      	ldr	r4, [pc, #52]	; (80198 <sysclk_init+0x48>)
   80162:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80164:	2800      	cmp	r0, #0
   80166:	d0fc      	beq.n	80162 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80168:	4b0c      	ldr	r3, [pc, #48]	; (8019c <sysclk_init+0x4c>)
   8016a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8016c:	4a0c      	ldr	r2, [pc, #48]	; (801a0 <sysclk_init+0x50>)
   8016e:	4b0d      	ldr	r3, [pc, #52]	; (801a4 <sysclk_init+0x54>)
   80170:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80172:	4c0d      	ldr	r4, [pc, #52]	; (801a8 <sysclk_init+0x58>)
   80174:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80176:	2800      	cmp	r0, #0
   80178:	d0fc      	beq.n	80174 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8017a:	2010      	movs	r0, #16
   8017c:	4b0b      	ldr	r3, [pc, #44]	; (801ac <sysclk_init+0x5c>)
   8017e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80180:	4b0b      	ldr	r3, [pc, #44]	; (801b0 <sysclk_init+0x60>)
   80182:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80184:	4801      	ldr	r0, [pc, #4]	; (8018c <sysclk_init+0x3c>)
   80186:	4b02      	ldr	r3, [pc, #8]	; (80190 <sysclk_init+0x40>)
   80188:	4798      	blx	r3
   8018a:	bd10      	pop	{r4, pc}
   8018c:	0501bd00 	.word	0x0501bd00
   80190:	200700a5 	.word	0x200700a5
   80194:	000802ed 	.word	0x000802ed
   80198:	00080341 	.word	0x00080341
   8019c:	00080351 	.word	0x00080351
   801a0:	200d3f01 	.word	0x200d3f01
   801a4:	400e0600 	.word	0x400e0600
   801a8:	00080361 	.word	0x00080361
   801ac:	00080285 	.word	0x00080285
   801b0:	00080499 	.word	0x00080499

000801b4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   801b4:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   801b6:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   801b8:	9c01      	ldr	r4, [sp, #4]
   801ba:	b10c      	cbz	r4, 801c0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   801bc:	6641      	str	r1, [r0, #100]	; 0x64
   801be:	e000      	b.n	801c2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   801c0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   801c2:	b10b      	cbz	r3, 801c8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   801c4:	6501      	str	r1, [r0, #80]	; 0x50
   801c6:	e000      	b.n	801ca <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   801c8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   801ca:	b10a      	cbz	r2, 801d0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   801cc:	6301      	str	r1, [r0, #48]	; 0x30
   801ce:	e000      	b.n	801d2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   801d0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   801d2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   801d4:	6001      	str	r1, [r0, #0]
}
   801d6:	bc10      	pop	{r4}
   801d8:	4770      	bx	lr
   801da:	bf00      	nop

000801dc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   801dc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   801de:	4770      	bx	lr

000801e0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   801e0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   801e2:	4770      	bx	lr

000801e4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   801e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801e8:	4604      	mov	r4, r0
   801ea:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   801ec:	4b0e      	ldr	r3, [pc, #56]	; (80228 <pio_handler_process+0x44>)
   801ee:	4798      	blx	r3
   801f0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   801f2:	4620      	mov	r0, r4
   801f4:	4b0d      	ldr	r3, [pc, #52]	; (8022c <pio_handler_process+0x48>)
   801f6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   801f8:	4005      	ands	r5, r0
   801fa:	d013      	beq.n	80224 <pio_handler_process+0x40>
   801fc:	4c0c      	ldr	r4, [pc, #48]	; (80230 <pio_handler_process+0x4c>)
   801fe:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80202:	6823      	ldr	r3, [r4, #0]
   80204:	4543      	cmp	r3, r8
   80206:	d108      	bne.n	8021a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80208:	6861      	ldr	r1, [r4, #4]
   8020a:	4229      	tst	r1, r5
   8020c:	d005      	beq.n	8021a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8020e:	68e3      	ldr	r3, [r4, #12]
   80210:	4640      	mov	r0, r8
   80212:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80214:	6863      	ldr	r3, [r4, #4]
   80216:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8021a:	42b4      	cmp	r4, r6
   8021c:	d002      	beq.n	80224 <pio_handler_process+0x40>
   8021e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80220:	2d00      	cmp	r5, #0
   80222:	d1ee      	bne.n	80202 <pio_handler_process+0x1e>
   80224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80228:	000801dd 	.word	0x000801dd
   8022c:	000801e1 	.word	0x000801e1
   80230:	20070574 	.word	0x20070574

00080234 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80234:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80236:	210b      	movs	r1, #11
   80238:	4801      	ldr	r0, [pc, #4]	; (80240 <PIOA_Handler+0xc>)
   8023a:	4b02      	ldr	r3, [pc, #8]	; (80244 <PIOA_Handler+0x10>)
   8023c:	4798      	blx	r3
   8023e:	bd08      	pop	{r3, pc}
   80240:	400e0e00 	.word	0x400e0e00
   80244:	000801e5 	.word	0x000801e5

00080248 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80248:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8024a:	210c      	movs	r1, #12
   8024c:	4801      	ldr	r0, [pc, #4]	; (80254 <PIOB_Handler+0xc>)
   8024e:	4b02      	ldr	r3, [pc, #8]	; (80258 <PIOB_Handler+0x10>)
   80250:	4798      	blx	r3
   80252:	bd08      	pop	{r3, pc}
   80254:	400e1000 	.word	0x400e1000
   80258:	000801e5 	.word	0x000801e5

0008025c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8025c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8025e:	210d      	movs	r1, #13
   80260:	4801      	ldr	r0, [pc, #4]	; (80268 <PIOC_Handler+0xc>)
   80262:	4b02      	ldr	r3, [pc, #8]	; (8026c <PIOC_Handler+0x10>)
   80264:	4798      	blx	r3
   80266:	bd08      	pop	{r3, pc}
   80268:	400e1200 	.word	0x400e1200
   8026c:	000801e5 	.word	0x000801e5

00080270 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80270:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80272:	210e      	movs	r1, #14
   80274:	4801      	ldr	r0, [pc, #4]	; (8027c <PIOD_Handler+0xc>)
   80276:	4b02      	ldr	r3, [pc, #8]	; (80280 <PIOD_Handler+0x10>)
   80278:	4798      	blx	r3
   8027a:	bd08      	pop	{r3, pc}
   8027c:	400e1400 	.word	0x400e1400
   80280:	000801e5 	.word	0x000801e5

00080284 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80284:	4a18      	ldr	r2, [pc, #96]	; (802e8 <pmc_switch_mck_to_pllack+0x64>)
   80286:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8028c:	4318      	orrs	r0, r3
   8028e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80290:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80292:	f013 0f08 	tst.w	r3, #8
   80296:	d003      	beq.n	802a0 <pmc_switch_mck_to_pllack+0x1c>
   80298:	e009      	b.n	802ae <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8029a:	3b01      	subs	r3, #1
   8029c:	d103      	bne.n	802a6 <pmc_switch_mck_to_pllack+0x22>
   8029e:	e01e      	b.n	802de <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   802a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   802a4:	4910      	ldr	r1, [pc, #64]	; (802e8 <pmc_switch_mck_to_pllack+0x64>)
   802a6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   802a8:	f012 0f08 	tst.w	r2, #8
   802ac:	d0f5      	beq.n	8029a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   802ae:	4a0e      	ldr	r2, [pc, #56]	; (802e8 <pmc_switch_mck_to_pllack+0x64>)
   802b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   802b2:	f023 0303 	bic.w	r3, r3, #3
   802b6:	f043 0302 	orr.w	r3, r3, #2
   802ba:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   802bc:	6e90      	ldr	r0, [r2, #104]	; 0x68
   802be:	f010 0008 	ands.w	r0, r0, #8
   802c2:	d004      	beq.n	802ce <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   802c4:	2000      	movs	r0, #0
   802c6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   802c8:	3b01      	subs	r3, #1
   802ca:	d103      	bne.n	802d4 <pmc_switch_mck_to_pllack+0x50>
   802cc:	e009      	b.n	802e2 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   802ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
   802d2:	4905      	ldr	r1, [pc, #20]	; (802e8 <pmc_switch_mck_to_pllack+0x64>)
   802d4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   802d6:	f012 0f08 	tst.w	r2, #8
   802da:	d0f5      	beq.n	802c8 <pmc_switch_mck_to_pllack+0x44>
   802dc:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   802de:	2001      	movs	r0, #1
   802e0:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   802e2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   802e4:	4770      	bx	lr
   802e6:	bf00      	nop
   802e8:	400e0600 	.word	0x400e0600

000802ec <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   802ec:	b138      	cbz	r0, 802fe <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   802ee:	4911      	ldr	r1, [pc, #68]	; (80334 <pmc_switch_mainck_to_xtal+0x48>)
   802f0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   802f2:	4a11      	ldr	r2, [pc, #68]	; (80338 <pmc_switch_mainck_to_xtal+0x4c>)
   802f4:	401a      	ands	r2, r3
   802f6:	4b11      	ldr	r3, [pc, #68]	; (8033c <pmc_switch_mainck_to_xtal+0x50>)
   802f8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   802fa:	620b      	str	r3, [r1, #32]
   802fc:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   802fe:	480d      	ldr	r0, [pc, #52]	; (80334 <pmc_switch_mainck_to_xtal+0x48>)
   80300:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80302:	0209      	lsls	r1, r1, #8
   80304:	b289      	uxth	r1, r1
   80306:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
   8030a:	f023 0303 	bic.w	r3, r3, #3
   8030e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80312:	f043 0301 	orr.w	r3, r3, #1
   80316:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80318:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8031a:	4602      	mov	r2, r0
   8031c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8031e:	f013 0f01 	tst.w	r3, #1
   80322:	d0fb      	beq.n	8031c <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80324:	4a03      	ldr	r2, [pc, #12]	; (80334 <pmc_switch_mainck_to_xtal+0x48>)
   80326:	6a13      	ldr	r3, [r2, #32]
   80328:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8032c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80330:	6213      	str	r3, [r2, #32]
   80332:	4770      	bx	lr
   80334:	400e0600 	.word	0x400e0600
   80338:	fec8fffc 	.word	0xfec8fffc
   8033c:	01370002 	.word	0x01370002

00080340 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80340:	4b02      	ldr	r3, [pc, #8]	; (8034c <pmc_osc_is_ready_mainck+0xc>)
   80342:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80344:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80348:	4770      	bx	lr
   8034a:	bf00      	nop
   8034c:	400e0600 	.word	0x400e0600

00080350 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80350:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80354:	4b01      	ldr	r3, [pc, #4]	; (8035c <pmc_disable_pllack+0xc>)
   80356:	629a      	str	r2, [r3, #40]	; 0x28
   80358:	4770      	bx	lr
   8035a:	bf00      	nop
   8035c:	400e0600 	.word	0x400e0600

00080360 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80360:	4b02      	ldr	r3, [pc, #8]	; (8036c <pmc_is_locked_pllack+0xc>)
   80362:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80364:	f000 0002 	and.w	r0, r0, #2
   80368:	4770      	bx	lr
   8036a:	bf00      	nop
   8036c:	400e0600 	.word	0x400e0600

00080370 <wdt_get_timeout_value>:
 */
uint32_t wdt_get_timeout_value(uint32_t ul_us, uint32_t ul_sclk)
{
	uint32_t max, min;

	min = WDT_SLCK_DIV * 1000000 / ul_sclk;
   80370:	4b09      	ldr	r3, [pc, #36]	; (80398 <wdt_get_timeout_value+0x28>)
   80372:	fbb3 f1f1 	udiv	r1, r3, r1
	max = min * WDT_MAX_VALUE;

	if ((ul_us < min) || (ul_us > max)) {
   80376:	4281      	cmp	r1, r0
   80378:	d808      	bhi.n	8038c <wdt_get_timeout_value+0x1c>
   8037a:	ebc1 3301 	rsb	r3, r1, r1, lsl #12
   8037e:	4283      	cmp	r3, r0
   80380:	d307      	bcc.n	80392 <wdt_get_timeout_value+0x22>
		return WDT_INVALID_ARGUMENT;
	}

	return WDT_MR_WDV(ul_us / min);
   80382:	fbb0 f0f1 	udiv	r0, r0, r1
   80386:	f3c0 000b 	ubfx	r0, r0, #0, #12
   8038a:	4770      	bx	lr

	min = WDT_SLCK_DIV * 1000000 / ul_sclk;
	max = min * WDT_MAX_VALUE;

	if ((ul_us < min) || (ul_us > max)) {
		return WDT_INVALID_ARGUMENT;
   8038c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80390:	4770      	bx	lr
   80392:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}

	return WDT_MR_WDV(ul_us / min);
}
   80396:	4770      	bx	lr
   80398:	07a12000 	.word	0x07a12000

0008039c <wdt_init>:
 * \param us_counter The value loaded in the 12-bit Watchdog Counter.
 * \param us_delta The permitted range for reloading the Watchdog Timer.
 */
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
		uint16_t us_delta)
{
   8039c:	b410      	push	{r4}
	p_wdt->WDT_MR = ul_mode |
			WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
   8039e:	4c05      	ldr	r4, [pc, #20]	; (803b4 <wdt_init+0x18>)
   803a0:	ea04 4303 	and.w	r3, r4, r3, lsl #16
   803a4:	f3c2 020b 	ubfx	r2, r2, #0, #12
   803a8:	4313      	orrs	r3, r2
   803aa:	4319      	orrs	r1, r3
 * \param us_delta The permitted range for reloading the Watchdog Timer.
 */
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
		uint16_t us_delta)
{
	p_wdt->WDT_MR = ul_mode |
   803ac:	6041      	str	r1, [r0, #4]
			WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
}
   803ae:	bc10      	pop	{r4}
   803b0:	4770      	bx	lr
   803b2:	bf00      	nop
   803b4:	0fff0000 	.word	0x0fff0000

000803b8 <wdt_restart>:
/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
	if (p_wdt == WDT) {
   803b8:	4b02      	ldr	r3, [pc, #8]	; (803c4 <wdt_restart+0xc>)
   803ba:	4298      	cmp	r0, r3
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
   803bc:	bf04      	itt	eq
   803be:	4a02      	ldreq	r2, [pc, #8]	; (803c8 <wdt_restart+0x10>)
   803c0:	601a      	streq	r2, [r3, #0]
   803c2:	4770      	bx	lr
   803c4:	400e1a50 	.word	0x400e1a50
   803c8:	a5000001 	.word	0xa5000001

000803cc <wdt_get_status>:
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
	return p_wdt->WDT_SR;
   803cc:	6880      	ldr	r0, [r0, #8]
}
   803ce:	4770      	bx	lr

000803d0 <wdt_get_us_timeout_period>:
 *
 * \return The timeout period in microseconds.
 */
uint32_t wdt_get_us_timeout_period(Wdt *p_wdt, uint32_t ul_sclk)
{
	return WDT_MR_WDV(p_wdt->WDT_MR) * WDT_SLCK_DIV / ul_sclk * 1000000;
   803d0:	6840      	ldr	r0, [r0, #4]
   803d2:	f3c0 000b 	ubfx	r0, r0, #0, #12
   803d6:	01c0      	lsls	r0, r0, #7
   803d8:	fbb0 f1f1 	udiv	r1, r0, r1
}
   803dc:	4801      	ldr	r0, [pc, #4]	; (803e4 <wdt_get_us_timeout_period+0x14>)
   803de:	fb00 f001 	mul.w	r0, r0, r1
   803e2:	4770      	bx	lr
   803e4:	000f4240 	.word	0x000f4240

000803e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   803e8:	e7fe      	b.n	803e8 <Dummy_Handler>
   803ea:	bf00      	nop

000803ec <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   803ec:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   803ee:	4b1e      	ldr	r3, [pc, #120]	; (80468 <Reset_Handler+0x7c>)
   803f0:	4a1e      	ldr	r2, [pc, #120]	; (8046c <Reset_Handler+0x80>)
   803f2:	429a      	cmp	r2, r3
   803f4:	d003      	beq.n	803fe <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   803f6:	4b1e      	ldr	r3, [pc, #120]	; (80470 <Reset_Handler+0x84>)
   803f8:	4a1b      	ldr	r2, [pc, #108]	; (80468 <Reset_Handler+0x7c>)
   803fa:	429a      	cmp	r2, r3
   803fc:	d304      	bcc.n	80408 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   803fe:	4b1d      	ldr	r3, [pc, #116]	; (80474 <Reset_Handler+0x88>)
   80400:	4a1d      	ldr	r2, [pc, #116]	; (80478 <Reset_Handler+0x8c>)
   80402:	429a      	cmp	r2, r3
   80404:	d30f      	bcc.n	80426 <Reset_Handler+0x3a>
   80406:	e01a      	b.n	8043e <Reset_Handler+0x52>
   80408:	4917      	ldr	r1, [pc, #92]	; (80468 <Reset_Handler+0x7c>)
   8040a:	4b1c      	ldr	r3, [pc, #112]	; (8047c <Reset_Handler+0x90>)
   8040c:	1a5b      	subs	r3, r3, r1
   8040e:	f023 0303 	bic.w	r3, r3, #3
   80412:	3304      	adds	r3, #4
   80414:	4a15      	ldr	r2, [pc, #84]	; (8046c <Reset_Handler+0x80>)
   80416:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80418:	f852 0b04 	ldr.w	r0, [r2], #4
   8041c:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80420:	429a      	cmp	r2, r3
   80422:	d1f9      	bne.n	80418 <Reset_Handler+0x2c>
   80424:	e7eb      	b.n	803fe <Reset_Handler+0x12>
   80426:	4b16      	ldr	r3, [pc, #88]	; (80480 <Reset_Handler+0x94>)
   80428:	4a16      	ldr	r2, [pc, #88]	; (80484 <Reset_Handler+0x98>)
   8042a:	1ad2      	subs	r2, r2, r3
   8042c:	f022 0203 	bic.w	r2, r2, #3
   80430:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80432:	3b04      	subs	r3, #4
		*pDest++ = 0;
   80434:	2100      	movs	r1, #0
   80436:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8043a:	4293      	cmp	r3, r2
   8043c:	d1fb      	bne.n	80436 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8043e:	4b12      	ldr	r3, [pc, #72]	; (80488 <Reset_Handler+0x9c>)
   80440:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80444:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80448:	4910      	ldr	r1, [pc, #64]	; (8048c <Reset_Handler+0xa0>)
   8044a:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8044c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80454:	d203      	bcs.n	8045e <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80456:	688b      	ldr	r3, [r1, #8]
   80458:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8045c:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8045e:	4b0c      	ldr	r3, [pc, #48]	; (80490 <Reset_Handler+0xa4>)
   80460:	4798      	blx	r3

	/* Branch to main function */
	main();
   80462:	4b0c      	ldr	r3, [pc, #48]	; (80494 <Reset_Handler+0xa8>)
   80464:	4798      	blx	r3
   80466:	e7fe      	b.n	80466 <Reset_Handler+0x7a>
   80468:	20070000 	.word	0x20070000
   8046c:	0008081c 	.word	0x0008081c
   80470:	20070558 	.word	0x20070558
   80474:	200705e8 	.word	0x200705e8
   80478:	20070558 	.word	0x20070558
   8047c:	20070557 	.word	0x20070557
   80480:	2007055c 	.word	0x2007055c
   80484:	200705eb 	.word	0x200705eb
   80488:	00080000 	.word	0x00080000
   8048c:	e000ed00 	.word	0xe000ed00
   80490:	000806b5 	.word	0x000806b5
   80494:	000805ed 	.word	0x000805ed

00080498 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80498:	4b3e      	ldr	r3, [pc, #248]	; (80594 <SystemCoreClockUpdate+0xfc>)
   8049a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8049c:	f003 0303 	and.w	r3, r3, #3
   804a0:	2b03      	cmp	r3, #3
   804a2:	d85f      	bhi.n	80564 <SystemCoreClockUpdate+0xcc>
   804a4:	e8df f003 	tbb	[pc, r3]
   804a8:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   804ac:	4b3a      	ldr	r3, [pc, #232]	; (80598 <SystemCoreClockUpdate+0x100>)
   804ae:	695b      	ldr	r3, [r3, #20]
   804b0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   804b4:	bf14      	ite	ne
   804b6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   804ba:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   804be:	4b37      	ldr	r3, [pc, #220]	; (8059c <SystemCoreClockUpdate+0x104>)
   804c0:	601a      	str	r2, [r3, #0]
   804c2:	e04f      	b.n	80564 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   804c4:	4b33      	ldr	r3, [pc, #204]	; (80594 <SystemCoreClockUpdate+0xfc>)
   804c6:	6a1b      	ldr	r3, [r3, #32]
   804c8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   804cc:	d003      	beq.n	804d6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   804ce:	4a34      	ldr	r2, [pc, #208]	; (805a0 <SystemCoreClockUpdate+0x108>)
   804d0:	4b32      	ldr	r3, [pc, #200]	; (8059c <SystemCoreClockUpdate+0x104>)
   804d2:	601a      	str	r2, [r3, #0]
   804d4:	e046      	b.n	80564 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   804d6:	4a33      	ldr	r2, [pc, #204]	; (805a4 <SystemCoreClockUpdate+0x10c>)
   804d8:	4b30      	ldr	r3, [pc, #192]	; (8059c <SystemCoreClockUpdate+0x104>)
   804da:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   804dc:	4b2d      	ldr	r3, [pc, #180]	; (80594 <SystemCoreClockUpdate+0xfc>)
   804de:	6a1b      	ldr	r3, [r3, #32]
   804e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   804e4:	2b10      	cmp	r3, #16
   804e6:	d002      	beq.n	804ee <SystemCoreClockUpdate+0x56>
   804e8:	2b20      	cmp	r3, #32
   804ea:	d004      	beq.n	804f6 <SystemCoreClockUpdate+0x5e>
   804ec:	e03a      	b.n	80564 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   804ee:	4a2e      	ldr	r2, [pc, #184]	; (805a8 <SystemCoreClockUpdate+0x110>)
   804f0:	4b2a      	ldr	r3, [pc, #168]	; (8059c <SystemCoreClockUpdate+0x104>)
   804f2:	601a      	str	r2, [r3, #0]
				break;
   804f4:	e036      	b.n	80564 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   804f6:	4a2a      	ldr	r2, [pc, #168]	; (805a0 <SystemCoreClockUpdate+0x108>)
   804f8:	4b28      	ldr	r3, [pc, #160]	; (8059c <SystemCoreClockUpdate+0x104>)
   804fa:	601a      	str	r2, [r3, #0]
				break;
   804fc:	e032      	b.n	80564 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   804fe:	4b25      	ldr	r3, [pc, #148]	; (80594 <SystemCoreClockUpdate+0xfc>)
   80500:	6a1b      	ldr	r3, [r3, #32]
   80502:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80506:	d003      	beq.n	80510 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80508:	4a25      	ldr	r2, [pc, #148]	; (805a0 <SystemCoreClockUpdate+0x108>)
   8050a:	4b24      	ldr	r3, [pc, #144]	; (8059c <SystemCoreClockUpdate+0x104>)
   8050c:	601a      	str	r2, [r3, #0]
   8050e:	e012      	b.n	80536 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80510:	4a24      	ldr	r2, [pc, #144]	; (805a4 <SystemCoreClockUpdate+0x10c>)
   80512:	4b22      	ldr	r3, [pc, #136]	; (8059c <SystemCoreClockUpdate+0x104>)
   80514:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80516:	4b1f      	ldr	r3, [pc, #124]	; (80594 <SystemCoreClockUpdate+0xfc>)
   80518:	6a1b      	ldr	r3, [r3, #32]
   8051a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8051e:	2b10      	cmp	r3, #16
   80520:	d002      	beq.n	80528 <SystemCoreClockUpdate+0x90>
   80522:	2b20      	cmp	r3, #32
   80524:	d004      	beq.n	80530 <SystemCoreClockUpdate+0x98>
   80526:	e006      	b.n	80536 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80528:	4a1f      	ldr	r2, [pc, #124]	; (805a8 <SystemCoreClockUpdate+0x110>)
   8052a:	4b1c      	ldr	r3, [pc, #112]	; (8059c <SystemCoreClockUpdate+0x104>)
   8052c:	601a      	str	r2, [r3, #0]
				break;
   8052e:	e002      	b.n	80536 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80530:	4a1b      	ldr	r2, [pc, #108]	; (805a0 <SystemCoreClockUpdate+0x108>)
   80532:	4b1a      	ldr	r3, [pc, #104]	; (8059c <SystemCoreClockUpdate+0x104>)
   80534:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80536:	4b17      	ldr	r3, [pc, #92]	; (80594 <SystemCoreClockUpdate+0xfc>)
   80538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8053a:	f003 0303 	and.w	r3, r3, #3
   8053e:	2b02      	cmp	r3, #2
   80540:	d10d      	bne.n	8055e <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80542:	4a14      	ldr	r2, [pc, #80]	; (80594 <SystemCoreClockUpdate+0xfc>)
   80544:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80546:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80548:	4814      	ldr	r0, [pc, #80]	; (8059c <SystemCoreClockUpdate+0x104>)
   8054a:	f3c3 410a 	ubfx	r1, r3, #16, #11
   8054e:	6803      	ldr	r3, [r0, #0]
   80550:	fb01 3303 	mla	r3, r1, r3, r3
   80554:	b2d2      	uxtb	r2, r2
   80556:	fbb3 f3f2 	udiv	r3, r3, r2
   8055a:	6003      	str	r3, [r0, #0]
   8055c:	e002      	b.n	80564 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8055e:	4a13      	ldr	r2, [pc, #76]	; (805ac <SystemCoreClockUpdate+0x114>)
   80560:	4b0e      	ldr	r3, [pc, #56]	; (8059c <SystemCoreClockUpdate+0x104>)
   80562:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80564:	4b0b      	ldr	r3, [pc, #44]	; (80594 <SystemCoreClockUpdate+0xfc>)
   80566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80568:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8056c:	2b70      	cmp	r3, #112	; 0x70
   8056e:	d107      	bne.n	80580 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80570:	4a0a      	ldr	r2, [pc, #40]	; (8059c <SystemCoreClockUpdate+0x104>)
   80572:	6813      	ldr	r3, [r2, #0]
   80574:	490e      	ldr	r1, [pc, #56]	; (805b0 <SystemCoreClockUpdate+0x118>)
   80576:	fba1 1303 	umull	r1, r3, r1, r3
   8057a:	085b      	lsrs	r3, r3, #1
   8057c:	6013      	str	r3, [r2, #0]
   8057e:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80580:	4b04      	ldr	r3, [pc, #16]	; (80594 <SystemCoreClockUpdate+0xfc>)
   80582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80584:	4905      	ldr	r1, [pc, #20]	; (8059c <SystemCoreClockUpdate+0x104>)
   80586:	f3c3 1202 	ubfx	r2, r3, #4, #3
   8058a:	680b      	ldr	r3, [r1, #0]
   8058c:	40d3      	lsrs	r3, r2
   8058e:	600b      	str	r3, [r1, #0]
   80590:	4770      	bx	lr
   80592:	bf00      	nop
   80594:	400e0600 	.word	0x400e0600
   80598:	400e1a10 	.word	0x400e1a10
   8059c:	2007012c 	.word	0x2007012c
   805a0:	00b71b00 	.word	0x00b71b00
   805a4:	003d0900 	.word	0x003d0900
   805a8:	007a1200 	.word	0x007a1200
   805ac:	0e4e1c00 	.word	0x0e4e1c00
   805b0:	aaaaaaab 	.word	0xaaaaaaab

000805b4 <WDT_Handler>:
volatile uint32_t g_ul_ms_ticks = 0;
/** Reset counter decreased by 1 every millisecond */
volatile uint32_t ul_rst_counter;

void WDT_Handler(void)
{
   805b4:	b510      	push	{r4, lr}
	//puts("Enter watchdog interrupt.\r");
	
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
   805b6:	4c07      	ldr	r4, [pc, #28]	; (805d4 <WDT_Handler+0x20>)
   805b8:	4620      	mov	r0, r4
   805ba:	4b07      	ldr	r3, [pc, #28]	; (805d8 <WDT_Handler+0x24>)
   805bc:	4798      	blx	r3
	/* Restart the WDT counter. */
	int i = 0;
	if( i == 0){
		PIOC->PIO_CODR = PIO_PC22;
   805be:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   805c2:	4b06      	ldr	r3, [pc, #24]	; (805dc <WDT_Handler+0x28>)
   805c4:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else if(i == 1){
		PIOC->PIO_SODR = PIO_PC22;
		i = 0;
	}
	wdt_restart(WDT);
   805c6:	4620      	mov	r0, r4
   805c8:	4b05      	ldr	r3, [pc, #20]	; (805e0 <WDT_Handler+0x2c>)
   805ca:	4798      	blx	r3
	//puts("The watchdog timer was restarted.\r");
	RSTC -> RSTC_MR = (0xA5 << 24) + 1;
   805cc:	4a05      	ldr	r2, [pc, #20]	; (805e4 <WDT_Handler+0x30>)
   805ce:	4b06      	ldr	r3, [pc, #24]	; (805e8 <WDT_Handler+0x34>)
   805d0:	609a      	str	r2, [r3, #8]
   805d2:	bd10      	pop	{r4, pc}
   805d4:	400e1a50 	.word	0x400e1a50
   805d8:	000803cd 	.word	0x000803cd
   805dc:	400e1200 	.word	0x400e1200
   805e0:	000803b9 	.word	0x000803b9
   805e4:	a5000001 	.word	0xa5000001
   805e8:	400e1a00 	.word	0x400e1a00

000805ec <main>:

}


int main (void)
{
   805ec:	b530      	push	{r4, r5, lr}
   805ee:	b083      	sub	sp, #12
	
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   805f0:	4b22      	ldr	r3, [pc, #136]	; (8067c <main+0x90>)
   805f2:	4798      	blx	r3
	//board_init();
	pio_set_output(PIOC, PIO_PC22, HIGH, false, false);
   805f4:	2400      	movs	r4, #0
   805f6:	9400      	str	r4, [sp, #0]
   805f8:	4623      	mov	r3, r4
   805fa:	2201      	movs	r2, #1
   805fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   80600:	481f      	ldr	r0, [pc, #124]	; (80680 <main+0x94>)
   80602:	4d20      	ldr	r5, [pc, #128]	; (80684 <main+0x98>)
   80604:	47a8      	blx	r5
	pio_set_output(PIOB, PIO_PB27, HIGH, false, false);
   80606:	9400      	str	r4, [sp, #0]
   80608:	4623      	mov	r3, r4
   8060a:	2201      	movs	r2, #1
   8060c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80610:	481d      	ldr	r0, [pc, #116]	; (80688 <main+0x9c>)
   80612:	47a8      	blx	r5

 	uint32_t wdt_mode, timeout_value;
 	
 	/* Initialize reset counter */
 	ul_rst_counter = RST_MS_COUNTER;
   80614:	f242 7210 	movw	r2, #10000	; 0x2710
   80618:	4b1c      	ldr	r3, [pc, #112]	; (8068c <main+0xa0>)
   8061a:	601a      	str	r2, [r3, #0]
 
 	
 	/* Get timeout value. */
 	timeout_value = wdt_get_timeout_value(WDT_PERIOD * 1000,
   8061c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   80620:	481b      	ldr	r0, [pc, #108]	; (80690 <main+0xa4>)
   80622:	4b1c      	ldr	r3, [pc, #112]	; (80694 <main+0xa8>)
   80624:	4798      	blx	r3
 	BOARD_FREQ_SLCK_XTAL);
 	if (timeout_value == WDT_INVALID_ARGUMENT) {
   80626:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8062a:	4298      	cmp	r0, r3
   8062c:	d100      	bne.n	80630 <main+0x44>
   8062e:	e7fe      	b.n	8062e <main+0x42>
 			WDT_MR_WDRPROC   |  /* WDT fault resets processor only. */
 			WDT_MR_WDDBGHLT  |  /* WDT stops in debug state. */
 			WDT_MR_WDIDLEHLT;   /* WDT stops in idle state. */
 	/* Initialize WDT with the given parameters. */
 
 	wdt_init(WDT, wdt_mode, timeout_value, timeout_value);
   80630:	b282      	uxth	r2, r0
   80632:	4c19      	ldr	r4, [pc, #100]	; (80698 <main+0xac>)
   80634:	4613      	mov	r3, r2
   80636:	4919      	ldr	r1, [pc, #100]	; (8069c <main+0xb0>)
   80638:	4620      	mov	r0, r4
   8063a:	4d19      	ldr	r5, [pc, #100]	; (806a0 <main+0xb4>)
   8063c:	47a8      	blx	r5
 	(int)wdt_get_us_timeout_period(WDT, BOARD_FREQ_SLCK_XTAL);
   8063e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   80642:	4620      	mov	r0, r4
   80644:	4b17      	ldr	r3, [pc, #92]	; (806a4 <main+0xb8>)
   80646:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   80648:	4b17      	ldr	r3, [pc, #92]	; (806a8 <main+0xbc>)
   8064a:	2210      	movs	r2, #16
   8064c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80650:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   80654:	2100      	movs	r1, #0
   80656:	f883 1304 	strb.w	r1, [r3, #772]	; 0x304

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8065a:	601a      	str	r2, [r3, #0]
   8065c:	2301      	movs	r3, #1

	while(true){
		
		for (int i = 0; i < 100000000; i++)
		{
			if(i == 99999991){
   8065e:	4913      	ldr	r1, [pc, #76]	; (806ac <main+0xc0>)
 	NVIC_SetPriority(WDT_IRQn, 0);
	NVIC_EnableIRQ(WDT_IRQn);

	while(true){
		
		for (int i = 0; i < 100000000; i++)
   80660:	4a13      	ldr	r2, [pc, #76]	; (806b0 <main+0xc4>)
		{
			if(i == 99999991){
				PIOB->PIO_CODR = PIO_PB27;
   80662:	f5a4 6425 	sub.w	r4, r4, #2640	; 0xa50
   80666:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   8066a:	e000      	b.n	8066e <main+0x82>
   8066c:	3301      	adds	r3, #1

	while(true){
		
		for (int i = 0; i < 100000000; i++)
		{
			if(i == 99999991){
   8066e:	428b      	cmp	r3, r1
				PIOB->PIO_CODR = PIO_PB27;
   80670:	bf08      	it	eq
   80672:	6360      	streq	r0, [r4, #52]	; 0x34

	while(true){
		
		for (int i = 0; i < 100000000; i++)
		{
			if(i == 99999991){
   80674:	d0fa      	beq.n	8066c <main+0x80>
 	NVIC_SetPriority(WDT_IRQn, 0);
	NVIC_EnableIRQ(WDT_IRQn);

	while(true){
		
		for (int i = 0; i < 100000000; i++)
   80676:	4293      	cmp	r3, r2
   80678:	ddf8      	ble.n	8066c <main+0x80>
   8067a:	e7fe      	b.n	8067a <main+0x8e>
   8067c:	00080151 	.word	0x00080151
   80680:	400e1200 	.word	0x400e1200
   80684:	000801b5 	.word	0x000801b5
   80688:	400e1000 	.word	0x400e1000
   8068c:	200705e4 	.word	0x200705e4
   80690:	002dc6c0 	.word	0x002dc6c0
   80694:	00080371 	.word	0x00080371
   80698:	400e1a50 	.word	0x400e1a50
   8069c:	30005000 	.word	0x30005000
   806a0:	0008039d 	.word	0x0008039d
   806a4:	000803d1 	.word	0x000803d1
   806a8:	e000e100 	.word	0xe000e100
   806ac:	05f5e0f8 	.word	0x05f5e0f8
   806b0:	05f5e0ff 	.word	0x05f5e0ff

000806b4 <__libc_init_array>:
   806b4:	b570      	push	{r4, r5, r6, lr}
   806b6:	4e0f      	ldr	r6, [pc, #60]	; (806f4 <__libc_init_array+0x40>)
   806b8:	4d0f      	ldr	r5, [pc, #60]	; (806f8 <__libc_init_array+0x44>)
   806ba:	1b76      	subs	r6, r6, r5
   806bc:	10b6      	asrs	r6, r6, #2
   806be:	bf18      	it	ne
   806c0:	2400      	movne	r4, #0
   806c2:	d005      	beq.n	806d0 <__libc_init_array+0x1c>
   806c4:	3401      	adds	r4, #1
   806c6:	f855 3b04 	ldr.w	r3, [r5], #4
   806ca:	4798      	blx	r3
   806cc:	42a6      	cmp	r6, r4
   806ce:	d1f9      	bne.n	806c4 <__libc_init_array+0x10>
   806d0:	4e0a      	ldr	r6, [pc, #40]	; (806fc <__libc_init_array+0x48>)
   806d2:	4d0b      	ldr	r5, [pc, #44]	; (80700 <__libc_init_array+0x4c>)
   806d4:	f000 f890 	bl	807f8 <_init>
   806d8:	1b76      	subs	r6, r6, r5
   806da:	10b6      	asrs	r6, r6, #2
   806dc:	bf18      	it	ne
   806de:	2400      	movne	r4, #0
   806e0:	d006      	beq.n	806f0 <__libc_init_array+0x3c>
   806e2:	3401      	adds	r4, #1
   806e4:	f855 3b04 	ldr.w	r3, [r5], #4
   806e8:	4798      	blx	r3
   806ea:	42a6      	cmp	r6, r4
   806ec:	d1f9      	bne.n	806e2 <__libc_init_array+0x2e>
   806ee:	bd70      	pop	{r4, r5, r6, pc}
   806f0:	bd70      	pop	{r4, r5, r6, pc}
   806f2:	bf00      	nop
   806f4:	00080804 	.word	0x00080804
   806f8:	00080804 	.word	0x00080804
   806fc:	0008080c 	.word	0x0008080c
   80700:	00080804 	.word	0x00080804

00080704 <register_fini>:
   80704:	4b02      	ldr	r3, [pc, #8]	; (80710 <register_fini+0xc>)
   80706:	b113      	cbz	r3, 8070e <register_fini+0xa>
   80708:	4802      	ldr	r0, [pc, #8]	; (80714 <register_fini+0x10>)
   8070a:	f000 b805 	b.w	80718 <atexit>
   8070e:	4770      	bx	lr
   80710:	00000000 	.word	0x00000000
   80714:	00080725 	.word	0x00080725

00080718 <atexit>:
   80718:	2300      	movs	r3, #0
   8071a:	4601      	mov	r1, r0
   8071c:	461a      	mov	r2, r3
   8071e:	4618      	mov	r0, r3
   80720:	f000 b814 	b.w	8074c <__register_exitproc>

00080724 <__libc_fini_array>:
   80724:	b538      	push	{r3, r4, r5, lr}
   80726:	4d07      	ldr	r5, [pc, #28]	; (80744 <__libc_fini_array+0x20>)
   80728:	4c07      	ldr	r4, [pc, #28]	; (80748 <__libc_fini_array+0x24>)
   8072a:	1b2c      	subs	r4, r5, r4
   8072c:	10a4      	asrs	r4, r4, #2
   8072e:	d005      	beq.n	8073c <__libc_fini_array+0x18>
   80730:	3c01      	subs	r4, #1
   80732:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   80736:	4798      	blx	r3
   80738:	2c00      	cmp	r4, #0
   8073a:	d1f9      	bne.n	80730 <__libc_fini_array+0xc>
   8073c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80740:	f000 b864 	b.w	8080c <_fini>
   80744:	0008081c 	.word	0x0008081c
   80748:	00080818 	.word	0x00080818

0008074c <__register_exitproc>:
   8074c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80750:	4c25      	ldr	r4, [pc, #148]	; (807e8 <__register_exitproc+0x9c>)
   80752:	4606      	mov	r6, r0
   80754:	6825      	ldr	r5, [r4, #0]
   80756:	4688      	mov	r8, r1
   80758:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   8075c:	4692      	mov	sl, r2
   8075e:	4699      	mov	r9, r3
   80760:	b3c4      	cbz	r4, 807d4 <__register_exitproc+0x88>
   80762:	6860      	ldr	r0, [r4, #4]
   80764:	281f      	cmp	r0, #31
   80766:	dc17      	bgt.n	80798 <__register_exitproc+0x4c>
   80768:	1c41      	adds	r1, r0, #1
   8076a:	b176      	cbz	r6, 8078a <__register_exitproc+0x3e>
   8076c:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   80770:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   80774:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   80778:	2201      	movs	r2, #1
   8077a:	4082      	lsls	r2, r0
   8077c:	4315      	orrs	r5, r2
   8077e:	2e02      	cmp	r6, #2
   80780:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   80784:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   80788:	d01e      	beq.n	807c8 <__register_exitproc+0x7c>
   8078a:	1c83      	adds	r3, r0, #2
   8078c:	6061      	str	r1, [r4, #4]
   8078e:	2000      	movs	r0, #0
   80790:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   80794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80798:	4b14      	ldr	r3, [pc, #80]	; (807ec <__register_exitproc+0xa0>)
   8079a:	b303      	cbz	r3, 807de <__register_exitproc+0x92>
   8079c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   807a0:	f3af 8000 	nop.w
   807a4:	4604      	mov	r4, r0
   807a6:	b1d0      	cbz	r0, 807de <__register_exitproc+0x92>
   807a8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   807ac:	2700      	movs	r7, #0
   807ae:	e884 0088 	stmia.w	r4, {r3, r7}
   807b2:	4638      	mov	r0, r7
   807b4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   807b8:	2101      	movs	r1, #1
   807ba:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   807be:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   807c2:	2e00      	cmp	r6, #0
   807c4:	d0e1      	beq.n	8078a <__register_exitproc+0x3e>
   807c6:	e7d1      	b.n	8076c <__register_exitproc+0x20>
   807c8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   807cc:	431a      	orrs	r2, r3
   807ce:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   807d2:	e7da      	b.n	8078a <__register_exitproc+0x3e>
   807d4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   807d8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   807dc:	e7c1      	b.n	80762 <__register_exitproc+0x16>
   807de:	f04f 30ff 	mov.w	r0, #4294967295
   807e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   807e6:	bf00      	nop
   807e8:	000807f4 	.word	0x000807f4
   807ec:	00000000 	.word	0x00000000
   807f0:	00000043 	.word	0x00000043

000807f4 <_global_impure_ptr>:
   807f4:	20070130                                0.. 

000807f8 <_init>:
   807f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   807fa:	bf00      	nop
   807fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   807fe:	bc08      	pop	{r3}
   80800:	469e      	mov	lr, r3
   80802:	4770      	bx	lr

00080804 <__init_array_start>:
   80804:	00080705 	.word	0x00080705

00080808 <__frame_dummy_init_array_entry>:
   80808:	00080119                                ....

0008080c <_fini>:
   8080c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8080e:	bf00      	nop
   80810:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80812:	bc08      	pop	{r3}
   80814:	469e      	mov	lr, r3
   80816:	4770      	bx	lr

00080818 <__fini_array_start>:
   80818:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
20070164:	000807f0 00000000 00000000 00000000     ................
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...
